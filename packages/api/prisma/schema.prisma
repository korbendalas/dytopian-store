generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  firstName          String              @map("first_name")
  lastName           String              @map("last_name")
  username           String              @unique
  telephone          String?
  email              String              @unique
  password           String?
  hashedRefreshToken String?             @map("hashed_refresh_token")
  address            String?
  city               String?
  country            String?
  zipCode            String?             @map("zip_code")
  googleId           String?             @unique @map("google_id")
  facebookId         String?             @unique @map("facebook_id")
  githubId           String?             @unique @map("github_id")
  favorites          Favorites[]
  userType           UserType            @default(USER) @map("user_type")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  userAvatar         UserAvatar[]
  productImages      ProductImages[]
  blacklistedTokens  BlacklistedTokens[]
  cartItems          CartItem[]

  @@map("users")
}

model OSSUser {
  id                 Int             @id @default(autoincrement())
  firstName          String          @map("first_name")
  lastName           String          @map("last_name")
  username           String          @unique
  telephone          String?
  email              String          @unique
  password           String?
  hashedRefreshToken String?         @map("hashed_refresh_token")
  address            String?
  city               String?
  country            String?
  userType           UserType        @default(USER) @map("user_type")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  ossUserAvatar      OSSUserAvatar[]
  productImages      ProductImages[]

  @@map("oss_users")
}

// create blacklistedtokens table, with composite key of token_id and user_id

model BlacklistedTokens {
  tokenId   String   @default(uuid())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, tokenId])
  @@map("blacklisted_tokens")
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  parentId      Int?       @map("parent_id")
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")
  products      Product[]  @relation("CategoryProducts")

  @@map("categories")
}

model Product {
  id               Int               @id @default(autoincrement())
  uuid             String            @unique @default(uuid())
  title            String
  price            Int
  discountPrice    Int?              @map("discount_price")
  quantity         Int               @default(0)
  sold             Int               @default(0)
  brandId          Int               @map("brand_id")
  brand            Brand             @relation(fields: [brandId], references: [id])
  smallDescription String            @map("small_description")
  largeDescription String            @map("large_description")
  specification    String
  categoryId       Int               @map("category_id")
  category         Category          @relation("CategoryProducts", fields: [categoryId], references: [id])
  favorites        Favorites[]
  productImages    ProductImages[]
  featuredProducts FeaturedProduct[]
  specialOffers    SpecialOffer[]
  cartItems        CartItem[]

  @@map("products")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("brands")
}

model FeaturedProduct {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("featured_products")
}

model SpecialOffer {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  startsAt  DateTime @map("starts_at")
  endsAt    DateTime @map("ends_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("special_offers")
}

model Favorites {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("favorites")
}

model UserAvatar {
  id        Int      @id @default(autoincrement())
  imgUrl    String   @map("img_url")
  userId    Int      @map("user_id") // uploaded by
  ossUserId Int?     @map("oss_user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_avatars")
}

model OSSUserAvatar {
  id        Int      @id @default(autoincrement())
  imgUrl    String   @map("img_url")
  ossUserId Int?     @map("oss_user_id")
  ossUser   OSSUser? @relation(fields: [ossUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("oss_user_avatars")
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  imgUrl    String   @map("img_url")
  productId Int      @map("product_id")
  cover     Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int?     @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ossUser   OSSUser? @relation(fields: [ossUserId], references: [id])
  ossUserId Int?     @map("oss_user_id")

  @@map("product_images")
}

// prisma model to store user's cart items with composite key of user_id and productUuid

model CartItem {
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  quantity  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, productId])
  @@map("cart_items")
}

enum UserType {
  USER
  ADMIN
  MODERATOR
  MANAGER
  SUPPORT
  RESTRICTED
  AFFILIATE
}
